const PDFDocument = require('pdfkit');
const fs = require('fs');
const path = require('path');

class PDFService {
  generateNetOperationPDF(netOperation, logoPath = null) {
    return new Promise((resolve, reject) => {
      try {
        const doc = new PDFDocument({ margin: 50 });
        const buffers = [];

        doc.on('data', buffers.push.bind(buffers));
        doc.on('end', () => {
          const pdfData = Buffer.concat(buffers);
          resolve(pdfData);
        });

        // Add logo if available
        if (logoPath && fs.existsSync(logoPath)) {
          try {
            doc.image(logoPath, 50, 45, { width: 100 });
            doc.moveDown(4);
          } catch (err) {
            console.log('Could not load logo, continuing without it');
          }
        }

        // Header
        doc.fontSize(20).font('Helvetica-Bold').text('Net Control Operation Report', {
          align: 'center'
        });
        
        doc.moveDown();
        doc.fontSize(12).font('Helvetica');

        // Net Information
        doc.fontSize(14).font('Helvetica-Bold').text('Net Information', { underline: true });
        doc.moveDown(0.5);
        doc.fontSize(11).font('Helvetica');
        
        doc.text(`Net Name: ${netOperation.netName || 'N/A'}`);
        doc.text(`Net Control Operator: ${netOperation.operatorCallsign}`);
        doc.text(`Start Time: ${new Date(netOperation.startTime).toLocaleString()}`);
        if (netOperation.endTime) {
          doc.text(`End Time: ${new Date(netOperation.endTime).toLocaleString()}`);
        }
        if (netOperation.frequency) {
          doc.text(`Frequency: ${netOperation.frequency}`);
        }
        doc.text(`Total Check-ins: ${netOperation.checkIns.length}`);
        
        if (netOperation.notes) {
          doc.moveDown(0.5);
          doc.text(`Notes: ${netOperation.notes}`);
        }

        doc.moveDown();

        // Check-ins Table
        doc.fontSize(14).font('Helvetica-Bold').text('Check-ins', { underline: true });
        doc.moveDown(0.5);

        // Table Header
        const tableTop = doc.y;
        const col1X = 50;
        const col2X = 180;
        const col3X = 320;
        const col4X = 450;

        doc.fontSize(11).font('Helvetica-Bold');
        doc.text('#', col1X, tableTop);
        doc.text('Callsign', col2X, tableTop);
        doc.text('Name', col3X, tableTop);
        doc.text('Time', col4X, tableTop);

        // Draw header line
        doc.moveTo(col1X, doc.y + 5)
           .lineTo(550, doc.y + 5)
           .stroke();

        // Table Rows
        doc.font('Helvetica').fontSize(10);
        netOperation.checkIns.forEach((checkIn, index) => {
          const y = doc.y + 10;
          
          // Check if we need a new page
          if (y > 700) {
            doc.addPage();
            doc.y = 50;
          }

          doc.text(`${index + 1}`, col1X, doc.y + 10);
          doc.text(checkIn.callsign, col2X, doc.y);
          doc.text(checkIn.name || 'N/A', col3X, doc.y);
          doc.text(new Date(checkIn.timestamp).toLocaleTimeString(), col4X, doc.y);

          if (checkIn.notes) {
            doc.moveDown(0.3);
            doc.fontSize(9).fillColor('gray');
            doc.text(`Notes: ${checkIn.notes}`, col2X, doc.y, { width: 300 });
            doc.fillColor('black').fontSize(10);
          }

          doc.moveDown(0.5);
        });

        // Footer
        doc.fontSize(8).fillColor('gray');
        doc.text(
          `Generated by Net Control by K4HEF - ${new Date().toLocaleString()}`,
          50,
          doc.page.height - 50,
          { align: 'center' }
        );

        doc.end();
      } catch (error) {
        reject(error);
      }
    });
  }
}

module.exports = new PDFService();

